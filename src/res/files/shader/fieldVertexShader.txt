#version 130
in vec2 location;
in vec4 texLocation;

uniform float hexWidth;
uniform float hexHeight2;
uniform float hexHeight;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

uniform float time;

uniform int texTW;
uniform int texTH;

const vec2 vertexPos[18] = vec2[18] (vec2(0.0, 0.25), vec2(0.5, 0.5), vec2(0.0, 0.75), vec2(0.0,  0.75), vec2(0.5, 0.5), vec2(0.5, 1), vec2(0.5, 1), vec2(0.5, 0.5), vec2(1, 0.75), vec2(1, 0.75), vec2(0.5, 0.5), vec2(1, 0.25), vec2(1, 0.25), vec2(0.5, 0.5), vec2(0.5, 0), vec2(0.5, 0), vec2(0.5, 0.5), vec2(0.0, 0.25));
const vec2 vertexTex[18] = vec2[18] (vec2(0.0, 0.25), vec2(0.5, 0.5), vec2(0.0, 0.75), vec2(0.0,  0.75), vec2(0.5, 0.5), vec2(0.5, 1), vec2(0.5, 1), vec2(0.5, 0.5), vec2(1, 0.75), vec2(1, 0.75), vec2(0.5, 0.5), vec2(1, 0.25), vec2(1, 0.25), vec2(0.5, 0.5), vec2(0.5, 0), vec2(0.5, 0), vec2(0.5, 0.5), vec2(0.0, 0.25));
out vec2 fragTex;
out float center;

void main() {
    fragTex = vertexTex[int(mod(gl_VertexID, 18))];
    fragTex.x = (texLocation[0]+fragTex.x*texLocation[2])/texTW;
    fragTex.y = 1-(texLocation[1]+(1-fragTex.y)*texLocation[3])/texTH;

    vec4 pos = vec4((vertexPos[int(mod(gl_VertexID, 18))].x+location.x-location.y/2)*hexWidth, (vertexPos[int(mod(gl_VertexID, 18))].y)*hexHeight2-(location.y)*hexHeight2*hexHeight, 0, 1);
    gl_Position = projectionMatrix * cameraMatrix * pos;

    center = abs(mod(gl_VertexID, 3) - 1);
}