#version 150
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

uniform float x, y, width, height;

uniform float time;

uniform int texTW;
uniform int texTH;
uniform int texX;
uniform int texY;
uniform int texW;
uniform int texH;

const vec2 vertexPos[4] = vec2[4] (vec2(0.0, 0.0), vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0));
const vec2 vertexTex[4] = vec2[4] (vec2(0.0, 0.0), vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0));
out vec2 fragTex;

void main() {
    fragTex = vertexTex[gl_VertexID];
    fragTex.x = (texX+fragTex.x*texW)/texTW;
    fragTex.y = 1-(texY+(1-fragTex.y)*texH)/texTH;

    vec4 pos = vec4(vertexPos[gl_VertexID].x*width+x, vertexPos[gl_VertexID].y*height+y, 0, 1);

    pos.x = pos.x + 0.2f * (sin(pos.x/8f+time/2000f)+cos(pos.y/8f+time/2000f));
    pos.y = pos.y + 0.2f * (cos(pos.x/8f+time/2000f)+sin(pos.y/8f+time/2000f));

    gl_Position = projectionMatrix * cameraMatrix * pos;
}